[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 5;
alias userSP R0;
userSP = SP;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11]*512;

alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;
physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;
fileDescPhysicalAddr = (physicalPageNum * 512) + offset;

alias fileDescriptor R4;
fileDescriptor=[fileDescPhysicalAddr];

alias physicalAddrRetVal R6;
physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);

alias word R5;
word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];

alias pcb R10;
pcb=PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16;

if (fileDescriptor != -2) then
	//code when argument 1 is a file
	if (fileDescriptor<0 || fileDescriptor>7) then
		[physicalAddrRetVal]=-1;
		SP = userSP;
		[pcb + 9] = 0;
		ireturn;
	endif;
	
	alias resourcetable R7;
	resourcetable=([pcb+11]+1)*512-16;
	
	if ([resourcetable+2*fileDescriptor]==-1 || [resourcetable+2*fileDescriptor]!=FILE) then
		[physicalAddrRetVal]=-1;
		SP = userSP;
		[pcb + 9] = 0;
		ireturn;
	endif;
	
	alias openfileindex R8;
	openfileindex=[resourcetable+2*fileDescriptor+1];
	
	alias inodeindex R9;
	inodeindex=[OPEN_FILE_TABLE+4*openfileindex+0];
	
	if ([pcb+3]!=1 && [pcb+3]!=[INODE_TABLE+16*inodeindex+3] && [INODE_TABLE+16*inodeindex+4]==EXCLUSIVE) then 
		[physicalAddrRetVal]=-3;
		SP = userSP;
		[pcb + 9] = 0;
		ireturn;
	endif;
	
	

	multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
	R1=4;
	R2=[SYSTEM_STATUS_TABLE+1];
	R3=inodeindex;
	call RESOURCE_MANAGER;
	R11=R0;
	multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
	
	if (R11==-1) then
		[physicalAddrRetVal]=-1;
		SP = userSP;
		[pcb + 9] = 0;
		ireturn;
	endif;
	
	alias lseek R11;
	lseek=[OPEN_FILE_TABLE+openfileindex*4+2];

	if (lseek==MAX_FILE_SIZE) then
		multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
		R1=5;
		R2=[SYSTEM_STATUS_TABLE+1];
		R3=inodeindex;
		call RESOURCE_MANAGER;
		multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
		
		[physicalAddrRetVal]=-2;
		SP = userSP;
		[pcb + 9] = 0;
		ireturn;
	endif;

	
	if (lseek%512==0 && lseek==[INODE_TABLE+16*inodeindex+2]) then
		multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
		R1=3;
		call MEMORY_MANAGER;
		R12=R0;
		multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
		
		if (R12==-1) then
			multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
			R1=5;
			R2=[SYSTEM_STATUS_TABLE+1];
			R3=inodeindex;
			call RESOURCE_MANAGER;
			multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
	
			[physicalAddrRetVal]=-2;
			SP = userSP;
			[pcb + 9] = 0;
			ireturn;
		endif;
		
		[INODE_TABLE+16*inodeindex+8+lseek/512]=R12;
	endif;

		
	multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
	R1=1;
	R2=[INODE_TABLE+16*inodeindex+8+lseek/512];//block num
	R3=lseek%512;
	R4=word;
	R5=[SYSTEM_STATUS_TABLE+1];
	call FILE_MANAGER;
	multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
	
	if (lseek==[INODE_TABLE+16*inodeindex+2]) then
		[INODE_TABLE+16*inodeindex+2]=[INODE_TABLE+16*inodeindex+2]+1;
		[ROOT_FILE+8*inodeindex+1]=[ROOT_FILE+8*inodeindex+1]+1;
	endif;

	[OPEN_FILE_TABLE+openfileindex*4+2]=[OPEN_FILE_TABLE+openfileindex*4+2]+1;
	
	multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
	R1=5;
	R2=[SYSTEM_STATUS_TABLE+1];
	R3=inodeindex;
	call RESOURCE_MANAGER;
	multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);

	[physicalAddrRetVal]=0;

else
	//code when argument 1 is valid
	
	multipush(R0,R1,R2,R3,R4,R5,R6);
	R1=3;
	R2=[SYSTEM_STATUS_TABLE+1];
	R3=word;
	
	call DEVICE_MANAGER;
	
	multipop(R0,R1,R2,R3,R4,R5,R6);
	[physicalAddrRetVal] = 0;
endif;

SP = userSP;
[pcb + 9] = 0;
ireturn;

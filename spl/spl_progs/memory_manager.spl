alias functionNum R1;
alias arg1 R2;


//GET FREE PAGE
if(functionNum == 1) then
	[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;
	
	while([SYSTEM_STATUS_TABLE + 2] == 0) do
		[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4] = WAIT_MEM;
		call MOD_5;
	endwhile;
	
	[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
	[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
	
	alias iter R4;
	
	iter = 0;
	while(iter < 128) do
		if([MEMORY_FREE_LIST + iter] == 0) then
			[MEMORY_FREE_LIST + iter] = 1;
			break;
		endif;
		iter = iter + 1;
	endwhile;
	
	R0 = iter;
	
	
	return;
		
endif;


//RELEASE PAGE
if(functionNum == 2) then
	//arg1 = pgnum	
	[MEMORY_FREE_LIST + arg1] = [MEMORY_FREE_LIST + arg1] - 1;
	
	if([MEMORY_FREE_LIST + arg1] == 0) then
		[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
	endif;
	
	alias iter R4;
	
	iter = 0;
	while(iter < 16) do
		if([PROCESS_TABLE + (iter * 16) + 4] == WAIT_MEM) then
			[PROCESS_TABLE + (iter * 16) + 4] = READY;
		endif;
		iter = iter + 1;
	endwhile;
	
	
	return;
endif;

//GET FREE BLOCK
if (functionNum==3) then
	R4=DISK_FREE_AREA;
	while (R4<DISK_SWAP_AREA) do
		if ([DISK_FREE_LIST+R4]==0) then
			[DISK_FREE_LIST+R4]=1;
			R0=R4;
			return;
		endif;
		R4=R4+1;
	endwhile;
	
	R0=-1;
	return;
endif; 

//RELEASE BLOCK
if (functionNum==4) then
	//arg1 = block num
	[DISK_FREE_LIST+arg1]=[DISK_FREE_LIST+arg1]-1;
	return;
endif;

//GET CODE PAGE
if (functionNum==5) then
	alias blockNum R2;
	
	alias iter R3;
	alias iter2 R5;
	alias disk_map_table_entry R4;
	alias page_table_entry R6;
	
	
	iter = 0;
	while(iter < MAX_PROC_NUM) do
		disk_map_table_entry = DISK_MAP_TABLE + iter * 10;
		page_table_entry = [PROCESS_TABLE + (iter * 16) + 14];
		
		iter2 = 4;
		while(iter2 < 8) do
			if([disk_map_table_entry + iter2] == blockNum && [page_table_entry + iter2*2] != -1) then
				R0 = [page_table_entry + iter2*2];
				[MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1;
				return;
			endif;
			iter2 = iter2 + 1;
		endwhile;
			
		
		
		iter = iter + 1;
	endwhile;
	
	
	multipush(R1,R2,R3,R4,R5,R6);
	R1 = 1;
	call MOD_2;
	multipop(R1,R2,R3,R4,R5,R6);
	
	//Calling disk load
	multipush(R0,R1,R2,R3,R4,R5,R6);
	R4 = R2;
	R3 = R0;
	R1 = 2;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_4;
	multipop(R0,R1,R2,R3,R4,R5,R6);
	
	return;
endif;

//GET_SWAP_BLOCK
if (functionNum==6) then
	R3=DISK_SWAP_AREA;
	while (R3<DISK_SIZE) do
		if ([DISK_FREE_LIST+R3]==0) then
			[DISK_FREE_LIST+R3]=1;
			R0=R3;
			return;
		endif;
		R3=R3+1;
	endwhile;
	R0=-1;
	return;
endif;

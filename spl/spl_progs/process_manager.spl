alias functionNum R1;
alias currentPID R2;

//get pcb
if(functionNum == 1) then
	R5=0;
	while (R5<16) do
		if ([PROCESS_TABLE+R5*16+4] == TERMINATED) then
			[PROCESS_TABLE+R5*16+1]=R5;
			[PROCESS_TABLE+R5*16+4]=ALLOCATED;
			[PROCESS_TABLE+R5*16+14]=PAGE_TABLE_BASE + 20*R5;
			[PROCESS_TABLE+R5*16+15]=10;
			R0=R5;
			return;
		endif;
		R5=R5+1;
	endwhile;
	R0=-1;
	return;
endif;

//Free User Area Page
if(functionNum == 2) then
	alias userAreaPage R3;
	userAreaPage = [PROCESS_TABLE + (currentPID * 16) + 11];
	
	alias resourcetable R5;
	resourcetable = ((userAreaPage+1)*512)-16;

	R6=0;
	while (R6<8) do
		if ([resourcetable+2*R6]!=-1) then
			if ([resourcetable+2*R6]==0) then
				multipush(R1,R2,R3,R5,R6);
				R1=4;
				R5=currentPID;
				R2=[resourcetable+(2*R6)+1];
				call FILE_MANAGER;
				multipop(R1,R2,R3,R5,R6);
			endif;

			if ([resourcetable+2*R6]==1) then
				multipush(R1,R2,R3,R5,R6);
				R1=7;
				R2=currentPID;
				R3=[resourcetable+(2*R6)+1];
				call RESOURCE_MANAGER;
				multipop(R1,R2,R3,R5,R6);
			endif;
		endif;
		R6=R6+1;
	endwhile;	
	
	//Release Page
	multipush(R1,R2,R3,R5);
	R1 = 2;
	R2 = userAreaPage;
	call MOD_2;
	multipop(R1,R2,R3,R5);
	
	return;
endif;

//Exit Process
if(functionNum == 3) then
	alias pcb R6;
	pcb=PROCESS_TABLE + (currentPID * 16);

	//Free Page Table
	multipush(R1,R2,R6);
	R1 = 4;
	call MOD_1;
	multipop(R1,R2,R6);
	
	//Free User Area Page
	multipush(R1,R2,R6);
	R1 = 2;
	call MOD_1; 
	multipop(R1,R2,R6);
	
	[pcb + 4] = TERMINATED;

	if ([PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]!=9) then
		R5=0;
		while (R5<16) do
			if ([PROCESS_TABLE+R5*16+4]==WAIT_PROCESS && [PROCESS_TABLE+R5*16+5]==currentPID) then
				[PROCESS_TABLE+R5*16+4]=READY;
				[PROCESS_TABLE+R5*16+5]=-1;
			endif;
			if([PROCESS_TABLE+R5*16+2]==currentPID) then
				[PROCESS_TABLE+R5*16+2]=-1;
			endif;
			R5=R5+1;
		endwhile;
	endif;

	return;
endif;

//Free Page Table
if(functionNum == 4) then
	
	alias ptbr R3;
	ptbr = [PROCESS_TABLE + (currentPID*16) + 14];
	
	alias iter R4;
	iter=0;
	while (iter<2) do
		[ptbr + iter*2] = -1;
		[ptbr + iter*2+1] = "0000";
		iter=iter+1;
	endwhile;
	
	iter = 4;
	
	while(iter < 20) do
		if([ptbr + iter] != -1) then
		
			//Release Page
			multipush(R1,R2,R3,R4);
			R1 = 2;
			R2 = [ptbr + iter];
			call MOD_2;
			multipop(R1,R2,R3,R4);
		
			[ptbr + iter] = -1;
			[ptbr + iter + 1] = "0000";
		endif;
		
		iter = iter + 2;
		
	endwhile;
	
	alias disk_map_table_entry R5;
	disk_map_table_entry = DISK_MAP_TABLE + currentPID*10;
	
	iter = 2;
	while(iter < 4) do
		if([disk_map_table_entry + iter] != -1) then
		
			multipush(R0,R1,R2,R3,R4,R5);
			R1 = 4;
			R2 = [disk_map_table_entry + iter];
			call MOD_2;
			multipop(R0,R1,R2,R3,R4,R5);
			
		endif;
		
		iter = iter + 1;
	endwhile;
	
	iter = 8;
	while(iter < 10) do
		if([disk_map_table_entry + iter] != -1) then
		
			multipush(R0,R1,R2,R3,R4,R5);
			R1 = 4;
			R2 = [disk_map_table_entry + iter];
			call MOD_2;
			multipop(R0,R1,R2,R3,R4,R5);
			
		endif;
		iter = iter + 1;
	endwhile;

	iter=0;
	while (iter<10) do
		[disk_map_table_entry + iter] = -1;
		iter=iter+1;
	endwhile;
	
	return;
	
endif;

//KILL ALL
if (functionNum==5) then
	R5=0;
	while (R5<60) do
		if ([INODE_TABLE+16*R5+1]!=-1) then
			multipush(R0,R1,R2,R5);
			R1=4;
			R2=currentPID;
			R3=R5;
			call RESOURCE_MANAGER;
			multipop(R0,R1,R2,R5);
		endif;
		R5=R5+1;
	endwhile;
	
	R5=2;
	while (R5<MAX_PROC_NUM) do
		if (R5==SWAPPER_DAEMON) then
			R5=R5+1;
			continue;
		endif;
		
		if (R5!=currentPID && [PROCESS_TABLE+R5*16+4]!=TERMINATED) then
			multipush(R0,R1,R2,R5);
			R1=3;
			R2=R5;
			call PROCESS_MANAGER;
			multipop(R0,R1,R2,R5);
		endif;
		R5=R5+1;
	endwhile;
	
	R5=0;
	while (R5<60) do
		if ([INODE_TABLE+16*R5+1]!=-1) then
			multipush(R0,R1,R2,R5);
			R1=5;
			R2=currentPID;
			R3=R5;
			call RESOURCE_MANAGER;
			multipop(R0,R1,R2,R5);
		endif;
		R5=R5+1;
	endwhile;
	
	return;
endif;

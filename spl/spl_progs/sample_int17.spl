alias userSP R4;
userSP=SP;

[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13]=SP;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512-1;

alias ret_val R0;
alias syscall R1;
alias uname R2;
alias passwd R3;

syscall=[[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14]+2*(userSP-5)/512]*512+((userSP-5)%512)];
ret_val=[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14]+2*(userSP-1)/512]*512+((userSP-1)%512);
uname=[[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14]+2*(userSP-4)/512]*512+((userSP-4)%512)];
passwd=[[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14]+2*(userSP-3)/512]*512+((userSP-3)%512)];

[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=syscall;

if ([SYSTEM_STATUS_TABLE+1]!=1) then
	[ret_val]=-2;
	SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
	ireturn;
endif;

R5=0;
while (R5<16) do
	if (uname==[USER_TABLE+2*R5]) then
		break;
	endif;
	R5=R5+1;
endwhile;

if (R5==16) then
	[ret_val]=-1;
	SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
	ireturn;
endif;

alias user_entry R6;
user_entry=USER_TABLE+2*R5;
	

encrypt passwd;

if (passwd!=[user_entry+1]) then
	[ret_val]=-1;
	SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
	ireturn;
endif;	

[PROCESS_TABLE+2*16+4]=CREATED;
[PROCESS_TABLE+2*16+3]=R5;

[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=WAIT_PROCESS;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+5]=2;

[SYSTEM_STATUS_TABLE+0]=R5;

multipush(R0,R1,R2,R3,R4,R5,R6);
call SCHEDULER;
multipop(R0,R1,R2,R3,R4,R5,R6);

[ret_val]=0;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
ireturn;

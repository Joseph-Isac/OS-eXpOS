alias pcb R4;
pcb=PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16;

alias userSP R5;
userSP=SP;

[pcb+13]=SP;
SP=[pcb+11]*512-1;

alias ret_val R0;
alias syscall R1;
alias arg1 R2;
alias arg2 R3;

ret_val=[[pcb+14]+2*(userSP-1)/512]*512+(userSP-1)%512;
syscall=[[[pcb+14]+2*(userSP-5)/512]*512+(userSP-5)%512];
arg1=[[[pcb+14]+2*(userSP-4)/512]*512+(userSP-4)%512];
arg2=[[[pcb+14]+2*(userSP-3)/512]*512+(userSP-3)%512];



[pcb+9]=syscall;

//OPEN SYS CALL
if (syscall==2) then
	//arg1=fname

	alias resourcetable R6;
	resourcetable=([pcb+11]+1)*512-16;
	
	alias RTindex R7;
	RTindex=0;
	while (RTindex<16) do
		if ([resourcetable+RTindex]==-1) then
			break;
		endif;
		RTindex=RTindex+2;
	endwhile;
	
	if (RTindex==16) then
		[ret_val]=-3;
		[pcb+9]=0;
		SP=[pcb+13];
		ireturn;
	endif;

	multipush(R0,R1,R2,R3,R4,R5,R6,R7);
	R1=3;
	R2=arg1;
	R5=[SYSTEM_STATUS_TABLE+1];
	call FILE_MANAGER;
	R8=R0;
	multipop(R0,R1,R2,R3,R4,R5,R6,R7);
	
	//print R8;

	if (R8==-1 || R8==-2) then
		[ret_val]=R8;
		[pcb+9]=0;
		SP=[pcb+13];
		ireturn;
	endif;
	
	[resourcetable+RTindex]=0;
	[resourcetable+RTindex+1]=R8;
	
	[ret_val]=RTindex/2;
	//print ret_val;
endif;

//CLOSE SYS CALL
if (syscall==3) then
	//arg1=file descriptor/resource table index
	
	if (arg1<0 || arg1>7) then
		[ret_val]=-1;
		[pcb+9]=0;
		SP=[pcb+13];
		ireturn;
	endif;
	
	alias resourcetable R6;
	resourcetable=([pcb+11]+1)*512-16;

	if ([resourcetable+arg1*2]==-1 || [resourcetable+arg1*2]==1) then
		[ret_val]=-1;
		[pcb+9]=0;
		SP=[pcb+13];
		ireturn;
	endif;

	alias filetableindex R7;
	filetableindex=[resourcetable+(arg1*2)+1];
	
	multipush(R0,R1,R2,R3,R4,R5,R6,R7);
	R1=4;
	R2=filetableindex;
	R5=[SYSTEM_STATUS_TABLE+1];
	call FILE_MANAGER;
	multipop(R0,R1,R2,R3,R4,R5,R6,R7);
	
	[resourcetable+arg1*2]=-1;
	[resourcetable+arg1*2+1]=-1;
	
	[ret_val]=0;
endif;

//SEEK SYS CALL
if (syscall==6) then
	//arg1=file desc, arg2=offset
	if (arg1<0 || arg1>7) then
		[ret_val]=-1;
		[pcb+9]=0;
		SP=[pcb+13];
		ireturn;
	endif;
	
	alias resourcetable R6;
	resourcetable=([pcb+11]+1)*512-16;

	if ([resourcetable+arg1*2]==-1 || [resourcetable+arg1*2]==1) then
		[ret_val]=-1;
		[pcb+9]=0;
		SP=[pcb+13];
		ireturn;
	endif;

	alias filetableindex R7;
	filetableindex=[resourcetable+(arg1*2)+1];
	
	alias inodeindex R8;
	inodeindex=[OPEN_FILE_TABLE+filetableindex*4];

	multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8);
	R1=4;
	R2=[SYSTEM_STATUS_TABLE+1];
	R3=inodeindex;
	call RESOURCE_MANAGER;
	R9=R0;
	multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8);
	
	if (R9==-1) then
		[ret_val]=-1;
		[pcb+9]=0;
		SP=[pcb+13];
		ireturn;
	endif;
	
	alias lseek R9;
	lseek=[OPEN_FILE_TABLE+filetableindex*4+2];
	
	//print lseek;
	//print arg2;
	

	alias filesize R10;
	if (inodeindex=="INODE_ROOT") then
		filesize=480;
	else
		filesize=[INODE_TABLE+16*inodeindex+2];
	endif;
	
	if ((lseek+arg2)<0) then	
		multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
		R1=5;
		R2=[SYSTEM_STATUS_TABLE+1];
		R3=inodeindex;
		call RESOURCE_MANAGER;
		multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
		
		[ret_val]=-2;
		[pcb+9]=0;
		SP=[pcb+13];
		ireturn;
	endif;
	
	if (arg2==0) then
		[OPEN_FILE_TABLE+filetableindex*4+2]=0;
	else
		if ((lseek+arg2)>filesize) then
			[OPEN_FILE_TABLE+filetableindex*4+2]=filesize;
		else
			[OPEN_FILE_TABLE+filetableindex*4+2]=lseek+arg2;
		endif;
	endif;


	multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
	R1=5;
	R2=[SYSTEM_STATUS_TABLE+1];
	R3=inodeindex;
	call RESOURCE_MANAGER;
	multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
	
	[ret_val]=0;
endif;

[pcb+9]=0;
SP=[pcb+13];
ireturn;
	
	
